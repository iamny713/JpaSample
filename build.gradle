buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	def querydslVersion = "4.1.4"
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.projectlombok:lombok:1.16.6')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.querydsl:querydsl-core:4.1.4')
	compile('com.querydsl:querydsl-apt:4.1.4')
	compile('com.querydsl:querydsl-jpa:4.1.4')
	runtime('org.hsqldb:hsqldb')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}


def queryDslOutput = file("src/main/generated")

sourceSets {
	main {
		java {
			srcDir "src/main/generated"
		}
	}
}


task generateQueryDSL(type: JavaCompile, group: 'build') {
	doFirst {
		if (!queryDslOutput.exists()) {
			logger.info("Creating `$queryDslOutput` directory")

			if (!queryDslOutput.mkdirs()) {
				throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
			}
		}
	}

	source = sourceSets.main.java
	classpath = configurations.compile
	options.compilerArgs = [
			"-proc:only",
			"-processor",
			"com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = queryDslOutput
}

compileTestJava.dependsOn(generateQueryDSL)

springBoot {
	mainClass = "com.jap.DemoApplication"
}

clean {
	delete queryDslOutput
}
